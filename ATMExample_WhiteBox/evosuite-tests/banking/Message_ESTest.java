/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 11 21:41:47 PDT 2016
 */

package banking;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true) 
public class Message_ESTest extends Message_ESTest_scaffolding {

  @Test
  public void test00()  throws Throwable  {
      Card card0 = new Card(0);
      Message message0 = new Message(0, card0, 0, 0, 0, 0, (Money) null);
      int int0 = message0.getToAccount();
      assertEquals(0, message0.getPIN());
      assertEquals(0, int0);
      assertEquals(0, message0.getMessageCode());
      assertEquals(0, message0.getFromAccount());
      assertEquals(0, message0.getSerialNumber());
  }

  @Test
  public void test01()  throws Throwable  {
      Card card0 = new Card((-3625));
      Message message0 = new Message(0, card0, 0, 4, 4, (-3625), (Money) null);
      int int0 = message0.getSerialNumber();
      assertEquals(0, message0.getPIN());
      assertEquals(4, int0);
      assertEquals(4, message0.getFromAccount());
      assertEquals(0, message0.getMessageCode());
      assertEquals(-3625, message0.getToAccount());
  }

  @Test
  public void test02()  throws Throwable  {
      Card card0 = new Card(708);
      Message message0 = new Message(708, card0, 708, (-3734), 708, (-1573), (Money) null);
      int int0 = message0.getPIN();
      assertEquals(-3734, message0.getSerialNumber());
      assertEquals(708, message0.getFromAccount());
      assertEquals(708, int0);
      assertEquals(-1573, message0.getToAccount());
      assertEquals(708, message0.getMessageCode());
  }

  @Test
  public void test03()  throws Throwable  {
      Card card0 = new Card(0);
      Message message0 = new Message(0, card0, 1, (-3117), 0, 1, (Money) null);
      int int0 = message0.getMessageCode();
      assertEquals(1, message0.getPIN());
      assertEquals(0, message0.getFromAccount());
      assertEquals(1, message0.getToAccount());
      assertEquals(0, int0);
      assertEquals(-3117, message0.getSerialNumber());
  }

  @Test
  public void test04()  throws Throwable  {
      Card card0 = new Card(0);
      Message message0 = new Message(1800, card0, 1800, 1800, 0, 0, (Money) null);
      int int0 = message0.getMessageCode();
      assertEquals(1800, message0.getSerialNumber());
      assertEquals(1800, int0);
      assertEquals(1800, message0.getPIN());
      assertEquals(0, message0.getFromAccount());
      assertEquals(0, message0.getToAccount());
  }

  @Test
  public void test05()  throws Throwable  {
      Card card0 = new Card((-3625));
      Message message0 = new Message(4, card0, (-3625), (-3625), 4, (-3625), (Money) null);
      int int0 = message0.getFromAccount();
      assertEquals(-3625, message0.getPIN());
      assertEquals(-3625, message0.getToAccount());
      assertEquals(-3625, message0.getSerialNumber());
      assertEquals(4, int0);
      assertEquals(4, message0.getMessageCode());
  }

  @Test
  public void test06()  throws Throwable  {
      Card card0 = new Card(0);
      Message message0 = new Message(1800, card0, 1800, 1800, 0, 0, (Money) null);
      message0.getCard();
      assertEquals(0, message0.getToAccount());
      assertEquals(1800, message0.getMessageCode());
      assertEquals(1800, message0.getSerialNumber());
      assertEquals(0, message0.getFromAccount());
      assertEquals(1800, message0.getPIN());
  }

  @Test
  public void test07()  throws Throwable  {
      Card card0 = new Card(1085);
      Message message0 = new Message(1828, card0, 0, (-1), 1085, 1085, (Money) null);
      message0.getCard();
      assertEquals(1085, message0.getToAccount());
      assertEquals(1828, message0.getMessageCode());
      assertEquals(1085, message0.getFromAccount());
      assertEquals(0, message0.getPIN());
      assertEquals(-1, message0.getSerialNumber());
  }

  @Test
  public void test08()  throws Throwable  {
      Card card0 = new Card((-1865));
      Message message0 = new Message((-1865), card0, (-1865), (-1865), (-1865), (-1865), (Money) null);
      message0.getCard();
      assertEquals(-1865, message0.getToAccount());
      assertEquals(-1865, message0.getPIN());
      assertEquals(-1865, message0.getFromAccount());
      assertEquals(-1865, message0.getMessageCode());
      assertEquals(-1865, message0.getSerialNumber());
  }

  @Test
  public void test09()  throws Throwable  {
      Card card0 = new Card((-3625));
      Message message0 = new Message(4, card0, (-3625), (-3625), 4, (-3625), (Money) null);
      int int0 = message0.getToAccount();
      assertEquals(-3625, message0.getSerialNumber());
      assertEquals((-3625), int0);
      assertEquals(4, message0.getMessageCode());
      assertEquals(4, message0.getFromAccount());
      assertEquals(-3625, message0.getPIN());
  }

  @Test
  public void test10()  throws Throwable  {
      Card card0 = new Card((-1214));
      Message message0 = new Message((-1214), card0, (-1214), (-1214), (-1214), (-1214), (Money) null);
      int int0 = message0.getFromAccount();
      assertEquals(-1214, message0.getSerialNumber());
      assertEquals(-1214, message0.getMessageCode());
      assertEquals(-1214, message0.getPIN());
      assertEquals((-1214), int0);
      assertEquals(-1214, message0.getToAccount());
  }

  @Test
  public void test11()  throws Throwable  {
      Card card0 = new Card((-3625));
      Message message0 = new Message(4, card0, (-3625), (-3625), 4, (-3625), (Money) null);
      int int0 = message0.getSerialNumber();
      assertEquals(4, message0.getMessageCode());
      assertEquals((-3625), int0);
      assertEquals(4, message0.getFromAccount());
      assertEquals(-3625, message0.getPIN());
      assertEquals(-3625, message0.getToAccount());
  }

  @Test
  public void test12()  throws Throwable  {
      Card card0 = new Card((-3625));
      Message message0 = new Message(4, card0, (-3625), (-3625), 4, (-3625), (Money) null);
      int int0 = message0.getPIN();
      assertEquals((-3625), int0);
      assertEquals(4, message0.getMessageCode());
      assertEquals(4, message0.getFromAccount());
      assertEquals(-3625, message0.getSerialNumber());
      assertEquals(-3625, message0.getToAccount());
  }

  @Test
  public void test13()  throws Throwable  {
      Card card0 = new Card(0);
      Message message0 = new Message(1800, card0, 1800, 1800, 0, 0, (Money) null);
      // Undeclared exception!
      try { 
        message0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("banking.Message", e);
      }
  }

  @Test
  public void test14()  throws Throwable  {
      Card card0 = new Card((-3625));
      Message message0 = new Message(4, card0, (-3625), (-3625), 4, (-3625), (Money) null);
      // Undeclared exception!
      try { 
        message0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("banking.Message", e);
      }
  }

  @Test
  public void test15()  throws Throwable  {
      Card card0 = new Card(0);
      Message message0 = new Message(3, card0, 1654, (-43), 3, 0, (Money) null);
      // Undeclared exception!
      try { 
        message0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("banking.Message", e);
      }
  }

  @Test
  public void test16()  throws Throwable  {
      Card card0 = new Card((-1615));
      Message message0 = new Message(2, card0, 2, 2, (-5), 2, (Money) null);
      // Undeclared exception!
      try { 
        message0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("banking.Message", e);
      }
  }

  @Test
  public void test17()  throws Throwable  {
      Card card0 = new Card(1);
      Message message0 = new Message(1, card0, 1, 1, (-1437), 1, (Money) null);
      // Undeclared exception!
      try { 
        message0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("banking.Message", e);
      }
  }

  @Test
  public void test18()  throws Throwable  {
      Card card0 = new Card(0);
      Message message0 = new Message(0, card0, 1, (-3117), 0, 1, (Money) null);
      // Undeclared exception!
      try { 
        message0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("banking.Message", e);
      }
  }

  @Test
  public void test19()  throws Throwable  {
      Card card0 = new Card(0);
      Message message0 = new Message(1644, card0, 0, 0, 0, 0, (Money) null);
      int int0 = message0.getPIN();
      assertEquals(0, int0);
      assertEquals(0, message0.getFromAccount());
      assertEquals(0, message0.getToAccount());
      assertEquals(0, message0.getSerialNumber());
      assertEquals(1644, message0.getMessageCode());
  }

  @Test
  public void test20()  throws Throwable  {
      Card card0 = new Card(0);
      Message message0 = new Message(0, card0, 468, 0, 468, 1, (Money) null);
      int int0 = message0.getSerialNumber();
      assertEquals(1, message0.getToAccount());
      assertEquals(0, message0.getMessageCode());
      assertEquals(0, int0);
      assertEquals(468, message0.getFromAccount());
      assertEquals(468, message0.getPIN());
  }

  @Test
  public void test21()  throws Throwable  {
      Card card0 = new Card(487);
      Message message0 = new Message(487, card0, 487, 487, 487, 487, (Money) null);
      message0.getAmount();
      assertEquals(487, message0.getMessageCode());
      assertEquals(487, message0.getSerialNumber());
      assertEquals(487, message0.getToAccount());
      assertEquals(487, message0.getFromAccount());
      assertEquals(487, message0.getPIN());
  }

  @Test
  public void test22()  throws Throwable  {
      Card card0 = new Card((-1));
      Message message0 = new Message(0, card0, (-1), (-12), (-1), 2, (Money) null);
      int int0 = message0.getToAccount();
      assertEquals(2, int0);
      assertEquals(0, message0.getMessageCode());
      assertEquals(-12, message0.getSerialNumber());
      assertEquals(-1, message0.getPIN());
      assertEquals(-1, message0.getFromAccount());
  }

  @Test
  public void test23()  throws Throwable  {
      Card card0 = new Card(0);
      Message message0 = new Message(0, card0, 0, 0, 0, (-3459), (Money) null);
      int int0 = message0.getFromAccount();
      assertEquals(0, message0.getPIN());
      assertEquals(0, message0.getSerialNumber());
      assertEquals(0, int0);
      assertEquals(-3459, message0.getToAccount());
      assertEquals(0, message0.getMessageCode());
  }

  @Test
  public void test24()  throws Throwable  {
      Message message0 = new Message(0, (Card) null, 0, 0, 0, 3070, (Money) null);
      message0.getCard();
      assertEquals(0, message0.getPIN());
      assertEquals(3070, message0.getToAccount());
      assertEquals(0, message0.getFromAccount());
      assertEquals(0, message0.getMessageCode());
      assertEquals(0, message0.getSerialNumber());
  }

  @Test
  public void test25()  throws Throwable  {
      Card card0 = new Card(621);
      Message message0 = new Message((-2085), card0, 112, 621, (-2085), 759, (Money) null);
      int int0 = message0.getMessageCode();
      assertEquals(621, message0.getSerialNumber());
      assertEquals(759, message0.getToAccount());
      assertEquals(112, message0.getPIN());
      assertEquals(-2085, message0.getFromAccount());
      assertEquals((-2085), int0);
  }

  @Test
  public void test26()  throws Throwable  {
      Card card0 = new Card(487);
      Message message0 = new Message(487, card0, 487, 487, 487, 487, (Money) null);
      message0.setPIN(487);
      assertEquals(487, message0.getFromAccount());
      assertEquals(487, message0.getSerialNumber());
      assertEquals(487, message0.getToAccount());
      assertEquals(487, message0.getPIN());
      assertEquals(487, message0.getMessageCode());
  }
  
  //Extra test cases
  @Test
  public void test27()  throws Throwable  {
      Card card0 = new Card(487);
      Message message0 = new Message(487, card0, 487, 487, 487, 487, new Money(0));
      message0.toString();
      message0.setPIN(487);
      assertEquals(487, message0.getFromAccount());
      assertEquals(487, message0.getSerialNumber());
      assertEquals(487, message0.getToAccount());
      assertEquals(487, message0.getPIN());
      assertEquals(487, message0.getMessageCode());
  }
  
  @Test
  public void test28()  throws Throwable  {
      Card card0 = new Card(487);
      Message message0 = new Message(487, card0, 487, 487, 487, 487, new Money(-2));
      message0.toString();
      message0.setPIN(487);
      assertEquals(487, message0.getFromAccount());
      assertEquals(487, message0.getSerialNumber());
      assertEquals(487, message0.getToAccount());
      assertEquals(487, message0.getPIN());
      assertEquals(487, message0.getMessageCode());
  }
}
