/* * ATM Example system - file Session.java * * copyright (c) 2001 - Russell C. Bjork * */package atm;import atm.physical.CustomerConsole;import atm.transaction.Deposit;import atm.transaction.Transaction;import atm.transaction.Withdrawal;import banking.Card;/** Representation for one ATM session serving a single customer. */public class Session {	Card card = null;	int transactionChoise;	boolean moneyOptionSet = false;	Transaction currentTransaction = null;	/**	 * Constructor	 *	 * @param atm	 *            the ATM on which the session is performed	 */	public Session(ATM atm) {		this.atm = atm;		state = READING_CARD_STATE;	}	/**	 * @return the state	 */	public int getState() {		return state;	}	public void setCard(int atmCardNo) {		card = new Card(atmCardNo);	}	/**	 * Perform the Session Use Case	 */	public void performSession() {		while (state != FINAL_STATE) {			switch (state) {			case READING_CARD_STATE:				if (card != null)					state = READING_PIN_STATE;				break;			case READING_PIN_STATE:				if (pin != 0)					state = CHOOSING_TRANSACTION_STATE;				break;			case CHOOSING_TRANSACTION_STATE:				try {					if (transactionChoise != 0) {						currentTransaction = Transaction.makeTransaction(atm, this, card, pin, transactionChoise - 1);						state = PERFORMING_TRANSACTION_STATE;					}				} catch (CustomerConsole.Cancelled e) {					state = EJECTING_CARD_STATE;				}				break;			case PERFORMING_TRANSACTION_STATE:				if (currentTransaction instanceof Withdrawal) {					if (moneyOptionSet) {						((Withdrawal) currentTransaction).setFrom(this.from);						((Withdrawal) currentTransaction).setMoneyOption(this.moneyOption);						try {							boolean doAgain = currentTransaction.performTransaction();							if (doAgain)								state = CHOOSING_TRANSACTION_STATE;							else								state = EJECTING_CARD_STATE;						} catch (Transaction.CardRetained e) {							state = FINAL_STATE;						}					}				} else if (currentTransaction instanceof Deposit) {					if (moneyOptionSet) {						((Deposit) currentTransaction).setAccType((this.from));						((Deposit) currentTransaction).setAmountToDeposit(this.moneyOption);						try {							boolean doAgain = currentTransaction.performTransaction();							if (doAgain)								state = CHOOSING_TRANSACTION_STATE;							else								state = EJECTING_CARD_STATE;						} catch (Transaction.CardRetained e) {							state = FINAL_STATE;						}					}				} 				else {					try {						boolean doAgain = currentTransaction.performTransaction();						if (doAgain)							state = CHOOSING_TRANSACTION_STATE;						else							state = EJECTING_CARD_STATE;					} catch (Transaction.CardRetained e) {						state = FINAL_STATE;					}				}				break;			case EJECTING_CARD_STATE:				atm.getCardReader().ejectCard();				state = FINAL_STATE;				break;			}		}	}	/**	 * @return the currentTransaction	 */	public Transaction getCurrentTransaction() {		return currentTransaction;	}	/**	 * @return the transactionChoise	 */	public int getTransactionChoise() {		return transactionChoise;	}	/**	 * @param transactionChoise	 *            the transactionChoise to set	 */	public void setTransactionChoise(int transactionChoise) {		this.transactionChoise = transactionChoise;	}	/**	 * Change the pin recorded for the customer (if invalid pin extension was	 * performed by a transaction	 *	 * @param pin	 *            the newly entered pin	 */	public void setPIN(int pin) {		this.pin = pin;	}	// Instance variables	private int from;	private int moneyOption;	/**	 * @return the from	 */	public int getFrom() {		return from;	}	/**	 * @param from	 *            the from to set	 */	public void setFrom(int from) {		this.from = from;	}	/**	 * @return the moneyOption	 */	public int getMoneyOption() {		return moneyOption;	}	/**	 * @param moneyOption	 *            the moneyOption to set	 */	public void setMoneyOption(int moneyOption) {		this.moneyOptionSet = true;		this.moneyOption = moneyOption;	}	/**	 * The ATM on which the session is performed	 */	private ATM atm;	/**	 * The PIN entered (or re-entered) by the customer	 */	private int pin;	/**	 * The current state of the session	 */	private int state;	// Possible values for state	/**	 * Reading the customer's card	 */	private static final int READING_CARD_STATE = 1;	/**	 * Asking the customer to enter a PIN	 */	private static final int READING_PIN_STATE = 2;	/**	 * Asking the customer to choose a transaction type	 */	private static final int CHOOSING_TRANSACTION_STATE = 3;	/**	 * Peforming a transaction	 */	private static final int PERFORMING_TRANSACTION_STATE = 4;	/**	 * Ejecting the customer's card	 */	private static final int EJECTING_CARD_STATE = 5;	/**	 * Session finished	 */	private static final int FINAL_STATE = 6;}